{"version":3,"sources":["Components/Camera/Camera.js","App.js","serviceWorker.js","index.js"],"names":["WebcamCapture","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","date","setState","startDate","setRef","webcam","captureLogin","imageSrc","getScreenshot","console","log","slice","sendVoteToServer","captureRegister","state","Date","react_default","a","createElement","className","react_webcam_default","audio","height","ref","screenshotFormat","width","videoConstraints","facingMode","href","onClick","htmlor","es","placeholder","value","type","name","id","style","selected","onChange","Component","App","image","option","url","haveData","logo","TryAgain","fetch","method","headers","Content-Type","Access-Control-Allow-Origin","body","JSON","stringify","then","res","json","response","status","length","window","location","catch","err","_this$state","data-icon","viewBox","fill","d","alt","src","Camera_Camera","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db2d2321.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport './Camera.css';\r\nimport 'tachyons';\r\n\r\n\r\n\r\nclass WebcamCapture extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        startDate: new Date()\r\n      };\r\n    }\r\n\r\n    handleChange = (date) => {\r\n      this.setState({\r\n        startDate: date\r\n      });\r\n    }\r\n\r\n    setRef = webcam => {\r\n      this.webcam = webcam;\r\n    };\r\n    \r\n    captureLogin = () => {\r\n      const imageSrc = this.webcam.getScreenshot();\r\n      console.log(imageSrc.slice(23))\r\n      this.props.sendVoteToServer(imageSrc.slice(23), \"login\");\r\n    };\r\n\r\n    captureRegister = () => {\r\n      const imageSrc = this.webcam.getScreenshot();\r\n      console.log(imageSrc.slice(23))\r\n      this.props.sendVoteToServer(imageSrc.slice(23), \"register\");\r\n    };\r\n  \r\n    render() {\r\n      const videoConstraints = {\r\n        width: 1280,\r\n        height: 680,\r\n        facingMode: \"user\"\r\n      };\r\n      return (\r\n        <div>\r\n          <div className=\"webcam\">\r\n            <Webcam\r\n              audio={true}\r\n              height={600}\r\n              ref={this.setRef}\r\n              screenshotFormat=\"image/jpeg\"\r\n              width={800}\r\n              videoConstraints={videoConstraints}\r\n              className=\"camera\"\r\n            />\r\n          </div>\r\n          <a className=\"center db mw4 tc f6 link dim ph3 pv2 mb2 white bg-dark-gray\" href=\"#0\" onClick={this.captureRegister}>Register</a>\r\n          <a className=\"center db mw4 tc f6 link dim ph3 pv2 mb2 white bg-dark-gray\" href=\"https://navalta3030.github.io/D35mins/\">View Data</a>\r\n          <div className=\"pa4-l\">\r\n            <form className=\"bg-dark-gray mw7 center pa4 br2-ns ba b--black-10 shadow-2\">\r\n              <fieldset className=\"cf bn ma0 pa0\">\r\n                <div className=\"cf flex justify-around\">\r\n                <label className=\"clip\" htmlor=\"email-address\">BirthDate</label>\r\n                <DatePicker className=\"f6 f5-l input-reset bn fl black-80 bg-white pa3 lh-solid w-100 w-75-m w-80-l br2-ns br--left-ns\" placeholder=\"Birthday\" value=\"\" type=\"text\" name=\"email-address\" id=\"email-address\" style={{width: \"560px\"}}\r\n                selected={this.state.startDate}\r\n                onChange={this.handleChange}\r\n                />\r\n                <input className=\"f6 f5-l button-reset fl pv3 tc bn bg-animate bg-black-70 hover-bg-black white pointer w-100 w-25-m w-20-l br2-ns br--right-ns\" type=\"submit\" value=\"Submit\" onClick={this.captureLogin}/>\r\n                </div>\r\n              </fieldset>\r\n            </form>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default WebcamCapture;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Camera from './Components/Camera/Camera.js';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    // Don't call this.setState() here!\r\n    this.state = { \r\n      haveData: true,\r\n      TryAgain: false,\r\n      logo: true,\r\n    };\r\n  }\r\n\r\n  sendVoteToServer = (image, option) => {\r\n    let url;\r\n    // let url = 'http://127.0.0.1:8000';\r\n    if (option === \"register\"){\r\n      url = 'http://badass.ghdom.tk/registerScript.php';\r\n    } else {\r\n      url = 'http://badass.ghdom.tk/searchVoterDB.php';\r\n    }\r\n    // let bday = document.querySelector('#bday');\r\n    this.setState({haveData: false, logo: false, TryAgain: false})\r\n    fetch(url, {\r\n      method: \"POST\", \r\n      headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Access-Control-Allow-Origin\": '*',\r\n      },\r\n      // credentials: \"include\",\r\n      // body: JSON.stringify({\r\n      //   \"image\" : image,\r\n      //   \"bday\" : bday.value\r\n      // })\r\n      body: JSON.stringify(image)\r\n    })\r\n    .then( res => res.json() )\r\n    .then(response => {\r\n      this.setState({haveData: response.status, logo: true})\r\n      console.log(response);\r\n      if(response.id.length > 4) {\r\n        window.location.href = \"http://badass.ghdom.tk/vote.php?id=ids95ez-1542566787\"\r\n      } else if (!response.id){\r\n        window.location.href = \"http://badass.ghdom.tk/vote.php?id=\"+response.id;;\r\n        } else {\r\n        this.setState({TryAgain: true, logo:true})\r\n      }\r\n    })\r\n    .catch( err => console.log(err))\r\n  }\r\n\r\n\r\n  render() {\r\n    const { haveData, TryAgain, logo } = this.state;\r\n    return (\r\n      <div className=\"App\"> \r\n        <div className=\"bg-black-70 mw7 center db shadow-5 h-50\">\r\n          {\r\n            TryAgain\r\n            ? ( <div id=\"tryagain\">\r\n                  <div className=\"flex items-center justify-center pa4 bg-lightest-blue navy\">\r\n                    <svg className=\"w1\" data-icon=\"info\" viewBox=\"0 0 32 32\" style={{fill:\"currentcolor\"}}>\r\n                      <title>info icon</title>\r\n                      <path d=\"M16 0 A16 16 0 0 1 16 32 A16 16 0 0 1 16 0 M19 15 L13 15 L13 26 L19 26 z M16 6 A3 3 0 0 0 16 12 A3 3 0 0 0 16 6\"></path>\r\n                    </svg>\r\n                    <span className=\"lh-title ml3\">Some info that you want to call attention to.</span>\r\n                  </div>\r\n                </div>\r\n              )\r\n              : null\r\n          }\r\n          {\r\n            logo\r\n              ?<img className=\"ourLogo\" alt=\"logo\" src=\"https://scontent.fmcc1-1.fna.fbcdn.net/v/t1.15752-9/46355562_2201807040057565_8309935061109571584_n.png?_nc_cat=103&_nc_ht=scontent.fmcc1-1.fna&oh=9459aa81b7c09a18dda612d38c0462b4&oe=5C82C491\"></img>\r\n              : null\r\n          }          \r\n          {\r\n            haveData\r\n            ? <Camera className=\"shadow-2\" sendVoteToServer={this.sendVoteToServer}></Camera>\r\n            : <img className=\"loading-logo\" alt=\"loading\" src=\"https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif\"></img>\r\n          }\r\n        </div>             \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}